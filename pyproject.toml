[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "maritime-anomaly-detection"
version = "1.0.0"
description = "Advanced maritime anomaly detection system using TrAISformer and ensemble methods"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Maritime AI Team", email = "team@maritime-ai.com"}
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]
requires-python = ">=3.8"
dependencies = [
    "torch>=1.9.0",
    "transformers>=4.15.0",
    "numpy>=1.21.0",
    "pandas>=1.5.0",
    "scikit-learn>=1.1.0",
    "xgboost>=1.6.0",
    "lightgbm>=3.3.0",
    "catboost>=1.1.0",
    "matplotlib>=3.5.0",
    "seaborn>=0.11.0",
    "plotly>=5.10.0",
    "pyyaml>=6.0",
    "tqdm>=4.64.0",
    "joblib>=1.1.0",
    "imbalanced-learn>=0.9.0",
    "shap>=0.41.0",
    "optuna>=2.10.0",
]

[project.optional-dependencies]
dev = [
    "black>=22.0.0",
    "isort>=5.10.0",
    "flake8>=4.0.0",
    "mypy>=0.950",
    "pytest>=7.1.0",
    "pytest-cov>=3.0.0",
    "pre-commit>=2.19.0",
    "jupyter>=1.0.0",
]
gpu = [
    "torch[cuda]>=1.9.0",
]
monitoring = [
    "wandb>=0.12.0",
    "tensorboard>=2.7.0",
]

[project.urls]
Homepage = "https://github.com/your-org/maritime-anomaly-detection"
Repository = "https://github.com/your-org/maritime-anomaly-detection"
Issues = "https://github.com/your-org/maritime-anomaly-detection/issues"

[project.scripts]
maritime-detect = "maritime_anomaly_detection.run_competition:main"

[tool.setuptools.packages.find]
where = ["."]
include = ["src*"]

[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.flake8]
max-line-length = 88
extend-ignore = ["E203", "W503"]
exclude = [
    ".git",
    "__pycache__",
    "build",
    "dist",
    ".venv",
    "venv",
]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-report=html",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
] 